# 1. –ò–º–ø–æ—Ä—Ç—ã
# ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
import os
import locale
from datetime import datetime
import atexit

# ‚Äî —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ
import requests
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv

# ‚Äî —Å–≤–æ–∏ –º–æ–¥—É–ª–∏
from database.config import get_db
from database.crud import (
    get_or_create_user,
    create_log,
    update_user_subscription,
    unsubscribe_user,
    )
from database.models import User

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
EVENTS_API_KEY=os.getenv("EVENTS_API_KEY")

if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ç–µ–ª–µ–±–æ—Ç–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ß—Ç–æ–±—ã –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
atexit.register(lambda: scheduler.shutdown())

bot = telebot.TeleBot(TOKEN)

# 4. –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    return response.json()

def get_news():
    url = f"https://newsapi.org/v2/top-headlines?country=us&apiKey={NEWS_API_KEY}"
    response = requests.get(url)
    return response.json().get('articles', [])

def get_events(city=None):
    url = "https://api.timepad.ru/v1/events/"
    headers = {
        "Authorization": f"Bearer {EVENTS_API_KEY}"
    }
    params = {
        "sort": "date",  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        "limit": 5,  # —Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
        "fields": "name,starts_at,description,url,location",  # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        "is_deleted": False,
        "is_confirmed": True
    }
    if city:
        params["cities"] = city

    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json().get('values', [])
    else:
        print(f"TimePad API error: {response.status_code} {response.text}")
        return []

try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    pass

def format_datetime(dt_str):
    try:
        dt = datetime.fromisoformat(dt_str)
        return dt.strftime('%d %B %Y, %H:%M')
    except Exception:
        return dt_str

# 5. –§—É–Ω–∫—Ü–∏—è send_daily_updates
def send_daily_updates():
    db = next(get_db())
    try:
        users = db.query(User).filter_by(subscription_settings="subscribed").all()
        for user in users:
            chat_id = user.telegram_id
            try:
                # –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                weather_data = get_weather("–ú–æ—Å–∫–≤–∞")
                if weather_data.get('cod') == 200:
                    temp = round(weather_data['main']['temp'])
                    descr = weather_data['weather'][0]['description']
                    bot.send_message(chat_id, f"–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: {descr}, {temp}¬∞C")
                else:
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                articles = get_news()
                if articles:
                    news = "\n\n".join(f"{a.get('title')} ‚Äî {a.get('url')}" for a in articles[:3])
                    bot.send_message(chat_id, f"–ù–æ–≤–æ—Å—Ç–∏:\n{news}")
                else:
                    bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
                events = get_events("–ú–æ—Å–∫–≤–∞")
                if events:
                    ev_msg = "\n\n".join(
                        f"{ev['name']}\n{format_datetime(ev['starts_at'])}\n{ev['url']}"
                        for ev in events[:3]
                    )
                    bot.send_message(chat_id, f"üé≠ –°–æ–±—ã—Ç–∏—è:\n{ev_msg}")
                else:
                    bot.send_message(chat_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π.")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    finally:
        db.close()

# 6. –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥: start, help, weather, news, events, subscribe, unsubscribe
# /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        create_log(db, user.id, "/start")

        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç, {user.name}! –Ø —Ç–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n\n"
                         "–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n\n"
                         "–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")
    finally:
        db.close()


# /help
@bot.message_handler(commands=["help"])
def help_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        create_log(db, user.id, "/help")

        bot.send_message(message.chat.id,
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                         "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
                         "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
                         "/news - —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
                         "/events - —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º\n"
                         "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π\n"
                         "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫\n"
                         )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
        bot.send_message(message.chat.id,
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                         "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
                         "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
                         "/news - —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
                         "/events - —Å–æ–±—ã—Ç–∏—è —Ä—è–¥–æ–º\n"
                         "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π\n"
                         "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫\n")
    finally:
        db.close()


# /weather
@bot.message_handler(commands=["weather"])
def weather_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –≥–æ—Ä–æ–¥–∞
            create_log(db, user.id, "/weather (–±–µ–∑ –≥–æ—Ä–æ–¥–∞)")
            return

        city = parts[1]
        data = get_weather(city)
        print(data)
        if data.get('cod') != 200:
            bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            create_log(db, user.id, f"/weather {city} (–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            return

        temp = round(data['main']['temp'])
        descr = data['weather'][0]['description']
        humidity = data['main']['humidity']
        wind = round(data['wind']['speed'])
        msg = (f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
               f"{descr.capitalize()}\n"
               f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
               f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
               f"–í–µ—Ç–µ—Ä: {wind} –º/—Å")
        bot.send_message(message.chat.id, msg)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        create_log(db, user.id, f"/weather {city}")

    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        try:
            user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            create_log(db, user.id, "/weather (–æ—à–∏–±–∫–∞)")
        except:
            pass
    finally:
        db.close()


# /news
@bot.message_handler(commands=["news"])
def news_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        articles = get_news()
        if not articles:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            create_log(db, user.id, "/news (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è)")
            return

        # –û—Ç–ø—Ä–∞–≤–∏–º 5 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        news_messages = []
        for article in articles[:5]:
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            url = article.get('url', '')
            news_messages.append(f"{title}\n{url}")

        bot.send_message(message.chat.id, "\n\n".join(news_messages))

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        create_log(db, user.id, "/news")

    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}')
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        try:
            user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            create_log(db, user.id, "/news (–æ—à–∏–±–∫–∞)")
        except:
            pass
    finally:
        db.close()

    # # –û—Ç–ø—Ä–∞–≤–∏–º 5 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∫ –∫–∞–∂–¥–æ–π ‚Äî –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    # for article in articles[:5]:
    #     title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    #     url = article.get('url', '')
    #
    #     markup = types.InlineKeyboardMarkup()
    #     if url:
    #         markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=url))
    #
    #     bot.send_message(message.chat.id, title, reply_markup=markup)


# /events
@bot.message_handler(commands=["events"])
def events_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_or_create_user(db, message.from_user.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        create_log(db, user.id, "/events")

        # bot.send_message(message.chat.id,
        #                  "–°–æ–±—ã—Ç–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã! –°–æ–±—ã—Ç–∏–µ –¥–Ω—è: –≤—ã –º–æ–ª–æ–¥–µ—Ü!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /events: {e}")
        bot.send_message(message.chat.id,
                         "–°–æ–±—ã—Ç–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã! –°–æ–±—ã—Ç–∏–µ –¥–Ω—è: –≤—ã –º–æ–ª–æ–¥–µ—Ü!")
    finally:
        db.close()
    try:
        parts = message.text.split(maxsplit=1)
        city = parts[1] if len(parts) > 1 else None

        events = get_events(city)
        if not events:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
            return

        event_messages = []
        for ev in events:
            name = ev.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            starts_at = ev.get('starts_at', '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            readable_date = format_datetime(starts_at) if starts_at != '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞' else starts_at
            url = ev.get('url', '')
            loc = ev.get('location', {})
            location_str = ""
            if isinstance(loc, dict):
                city_name = loc.get('city', '')
                address = loc.get('address', '')
                location_str = f" ({city_name}, {address})" if city_name or address else ""
            event_messages.append(f"{name}{location_str}\n–î–∞—Ç–∞: {readable_date}\n{url}")

        bot.send_message(message.chat.id, "\n\n".join(event_messages))

    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π.")


# /subscribe
@bot.message_handler(commands=["subscribe"])
def subscribe_handler(message):
    db = next(get_db())
    try:
        get_or_create_user(db, message.from_user.id, message.from_user.full_name)
        update_user_subscription(db, message.from_user.id)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    finally:
        db.close()


# /unsubscribe
@bot.message_handler(commands=["unsubscribe"])
def unsubscribe_handler(message):
    db = next(get_db())
    try:
        get_or_create_user(db, message.from_user.id, message.from_user.full_name)
        unsubscribe_user(db, message.from_user.id)
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    finally:
        db.close()

# 7. –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á APScheduler
# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
scheduler.add_job(send_daily_updates, 'cron', hour=9, minute=0)

# 8. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {e}")
